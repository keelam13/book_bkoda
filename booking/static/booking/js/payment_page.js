$(document).ready(function () {
    // --- Constant and Variable Declarations ---
    const paymentForm = $('#payment-form');
    const selectedPaymentMethodInput = $('#selected-payment-method-hidden');
    const cardPaymentDetails = $('#cardPaymentDetails');
    const otherPaymentDetails = $('#otherPaymentDetails');
    const cardErrors = $('#card-errors');
    const paymentIntentIdInput = $('#payment_intent_id');
    const submitButton = $('#submit-button');
    const termsCheck = $('#termsCheck');
    const loadingOverlay = $('#loading-overlay');

    // Billing Address Elements
    const manualBillingAddressFields = $('#manual-billing-address-fields');
    
    // Billing Form Inputs (using IDs generated by Django/Crispy Forms)
    const billingNameInput = $('#id_billing_name');
    const billingEmailInput = $('#id_billing_email');
    const billingPhoneInput = $('#id_billing_phone');
    const billingStreetAddress1Input = $('#id_billing_street_address1');
    const billingStreetAddress2Input = $('#id_billing_street_address2');
    const billingCityInput = $('#id_billing_city');
    const billingPostcodeInput = $('#id_billing_postcode');
    const billingCountrySelect = $('#id_billing_country');

    // Global Stripe variables
    let stripe = null;
    let elements = null;
    let card = null;

    const cardElementStyle = {
        base: {
            color: '#000',
            fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
            fontSmoothing: 'antialiased',
            fontSize: '16px',
            '::placeholder': {
                color: '#aab7c4'
            }
        },
        invalid: {
            color: '#dc3545',
            iconColor: '#dc3545'
        }
    };

    // --- Stripe Initialization and Teardown Functions ---

    /**
     * Initializes or re-initializes the Stripe card element.
     * Ensures any existing card element is unmounted and a new one is created and mounted.
     */
    function initializeStripe() {
        if (stripe === null) {
            const stripePublicKey = $('#id_stripe_public_key').text().slice(1, -1);
            stripe = Stripe(stripePublicKey);
            elements = stripe.elements();
            console.log("Stripe object and Elements created for the first time.");
        }

        if (card) {
            card.unmount();
            $('#card-element').empty();
            card = null;
            }

        $('#card-element').empty();

        // Create and mount a NEW card element
        card = elements.create('card', { style: cardElementStyle });
        card.mount('#card-element');

        card.addEventListener('change', function (event) {
            if (event.error) {
                const html = `
                        <span class="icon" role="alert">
                            <i class="fas fa-times"></i>
                        </span>
                        <span>${event.error.message}</span>
                    `;
                cardErrors.html(html);
            } else {
                cardErrors.text('');
            }
        });
    }

    /**
     * Tears down the Stripe card element.
     * Unmounts the card element and nullifies global Stripe related variables.
     */
    function teardownStripe() {
        if (card) {
            card.unmount();
            card = null;
            $('#card-element').empty(); 
        }
        
        elements = null;
        stripe = null;
    }

    // --- Payment Method Toggle Logic ---

    /**
     * Handles the display logic when a payment method is selected.
     * Initializes/tears down Stripe elements as necessary.
     */
    function setupPaymentMethodToggle() {
        const selectedMethod = $('input[name="payment_method"]:checked').val();
        selectedPaymentMethodInput.val(selectedMethod);

        if (selectedMethod === 'CARD') {
            cardPaymentDetails.css('display', 'block');
            otherPaymentDetails.css('display', 'none');
            submitButton.text('Confirm Card Payment');
            cardErrors.text('');
            initializeStripe();
            toggleBillingAddressFields(); 
        } else if (selectedMethod === 'CASH' || selectedMethod === 'GCASH'){
            cardPaymentDetails.css('display', 'none');
            otherPaymentDetails.css('display', 'block');
            submitButton.text('Confirm Booking');
            cardErrors.text('');
            teardownStripe();
            manualBillingAddressFields.find('input, select').attr('disabled', true);
        } else {
            cardPaymentDetails.css('display', 'none');
            otherPaymentDetails.css('display', 'none');
            submitButton.text('Confirm Booking');
            cardErrors.text('');
            teardownStripe();
            manualBillingAddressFields.find('input, select').attr('disabled', true);
        }

    }

    // Attach change listener to payment method radio buttons
    $('input[name="payment_method"]').on('change', setupPaymentMethodToggle);
    setupPaymentMethodToggle(); 


    // --- Billing Address Toggle Logic (for authenticated users) ---

    /**
     * Enables state of manual billing address fields ONLY when the payment method is selected.
     */
    function toggleBillingAddressFields() {
        if ($('input[name="payment_method"]:checked').val() === 'CARD') {
             manualBillingAddressFields.find('input, select').attr('disabled', false);
        } else {
            manualBillingAddressFields.find('input, select').attr('disabled', true);
            }
        }

    toggleBillingAddressFields();

    /**
     * Gathers billing details from the form inputs.
     * @returns {Object} Billing details object formatted for Stripe.
     */
    function getBillingDetails() {
        let billingDetails = {
            name: $.trim(billingNameInput.val()),
            email: $.trim(billingEmailInput.val()),
            phone: $.trim(billingPhoneInput.val()),
            address: {
                line1: $.trim(billingStreetAddress1Input.val()),
                line2: $.trim(billingStreetAddress2Input.val()),
                city: $.trim(billingCityInput.val()),
                postal_code: $.trim(billingPostcodeInput.val()),
                country: $.trim(billingCountrySelect.val()),
            }
        };

        // Remove empty address fields to prevent Stripe API errors
        for (const key in billingDetails.address) {
            if (billingDetails.address[key] === '') {
                delete billingDetails.address[key];
            }
        }
        // Remove empty phone if exists
        if (billingDetails.phone === '') delete billingDetails.phone;
        
        return billingDetails;
    }


    // --- Form Submission Logic ---

    paymentForm.on('submit', async function (event) {
        const clickedButton = event.originalEvent ? event.originalEvent.submitter : null;

        if (clickedButton && $(clickedButton).attr('name') === 'action' && $(clickedButton).val() === 'cancel_booking') {
            return;
        }

        event.preventDefault();

        if (!termsCheck.prop('checked')) {
            cardErrors.html(`
                <span class="icon" role="alert"><i class="fas fa-times"></i></span>
                <span>Please agree to the Terms & Conditions.</span>
            `);
            return;
        }

        const paymentMethod = selectedPaymentMethodInput.val();
        
        // Show loading overlay and hide form
        paymentForm.fadeToggle(100);
        loadingOverlay.fadeToggle(100);

        if (paymentMethod === 'CARD') {
            manualBillingAddressFields.find('input, select').attr('disabled', false);

            if (card) card.update({ disabled: true });
            submitButton.attr('disabled', true);
            cardErrors.text('');

            if (!billingNameInput.val().trim()) {
                cardErrors.html(`
                    <span class="icon" role="alert"><i class="fas fa-times"></i></span>
                    <span>Please enter the name on the card.</span>
                `);
                paymentForm.fadeToggle(100);
                loadingOverlay.fadeToggle(100);
                if (card) card.update({ 'disabled': false });
                submitButton.attr('disabled', false);
                toggleBillingAddressFields();
                return;
            }

            const billingDetails = getBillingDetails();
            const currentClientSecret = $('#id_client_secret').text().slice(1, -1);

            if (!currentClientSecret) {
                cardErrors.html(`
                    <span class="icon" role="alert"><i class="fas fa-times"></i></span>
                    <span>Payment process error: Missing client secret. Please refresh and try again.</span>
                `);
                paymentForm.fadeToggle(100);
                loadingOverlay.fadeToggle(100);
                if (card) card.update({ 'disabled': false });
                submitButton.attr('disabled', false);
                toggleBillingAddressFields();
                return;
            }

            try {
                const { paymentIntent, error } = await stripe.confirmCardPayment(currentClientSecret, {
                    payment_method: {
                        card: card,
                        billing_details: billingDetails,
                    },
                });

                if (error) {
                    cardErrors.html(`
                        <span class="icon" role="alert"><i class="fas fa-times"></i></span>
                        <span>${error.message}</span>
                    `);
                    paymentForm.fadeToggle(100);
                    loadingOverlay.fadeToggle(100);
                    if (card) card.update({ 'disabled': false });
                    submitButton.attr('disabled', false);
                    toggleBillingAddressFields();
                } else if (paymentIntent.status === 'succeeded') {
                    paymentIntentIdInput.val(paymentIntent.id);
                    paymentForm.off('submit').submit();
                } else if (paymentIntent.status === 'requires_action') {
                    console.log("Payment requires action:", paymentIntent.status);
                    const { error: actionError, paymentIntent: actionPaymentIntent } = await stripe.handleCardAction(paymentIntent.client_secret);

                    if (actionError) {
                        console.error("Stripe handleCardAction error:", actionError);
                        cardErrors.html(`
                            <span class="icon" role="alert"><i class="fas fa-times"></i></span>
                            <span>${actionError.message}</span>
                        `);
                        paymentForm.fadeToggle(100);
                        loadingOverlay.fadeToggle(100);
                        if (card) card.update({ 'disabled': false });
                        submitButton.attr('disabled', false);
                        toggleBillingAddressFields();
                    } else if (actionPaymentIntent.status === 'succeeded') {
                        paymentIntentIdInput.val(actionPaymentIntent.id);
                        paymentForm.off('submit').submit();
                    } else {
                        console.warn("Payment still not succeeded after action. Status:", actionPaymentIntent.status);
                        cardErrors.html(`
                            <span class="icon" role="alert"><i class="fas fa-times"></i></span>
                            <span>Payment not successful after action. Status: ${actionPaymentIntent.status}. Please try again.</span>
                        `);
                        paymentForm.fadeToggle(100);
                        loadingOverlay.fadeToggle(100);
                        if (card) card.update({ 'disabled': false });
                        submitButton.attr('disabled', false);
                        toggleBillingAddressFields();
                    }
                } else {
                    console.warn("Payment not succeeded. Unexpected status:", paymentIntent.status);
                    cardErrors.html(`
                        <span class="icon" role="alert"><i class="fas fa-times"></i></span>
                        <span>Payment not successful. Status: ${paymentIntent.status}. Please check details or try another method.</span>
                    `);
                    paymentForm.fadeToggle(100);
                    loadingOverlay.fadeToggle(100);
                    if (card) card.update({ 'disabled': false });
                    submitButton.attr('disabled', false);
                    toggleBillingAddressFields();
                }
            } catch (jsError) {
                cardErrors.html(`
                    <span class="icon" role="alert"><i class="fas fa-times"></i></span>
                    <span>An unexpected error occurred during payment. Please try again.</span>
                `);
                paymentForm.fadeToggle(100);
                loadingOverlay.fadeToggle(100);
                if (card) card.update({ 'disabled': false });
                submitButton.attr('disabled', false);
                toggleBillingAddressFields();
            }
        } else {
            // For CASH or GCASH, ensure fields are disabled before submission
            manualBillingAddressFields.find('input, select').attr('disabled', true);
            paymentForm.off('submit').submit();
        }
    });
});